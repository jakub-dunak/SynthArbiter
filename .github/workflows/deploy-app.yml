name: Deploy Application

on:
  # push:
  #   branches: [main]
  #   paths: ['agent/**', 'app/**', 'services/**', 'data_acquisition/**']
  workflow_dispatch:
    inputs:
      region:
        type: choice
        options: [us-east-1, us-west-2, eu-west-1, ap-southeast-1]
        default: us-east-1
        description: AWS region for deployment
      environment:
        type: choice
        options: [dev, prod]
        default: dev
        description: Environment to deploy to

jobs:
  build-push-ecr:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: ${{ github.event.inputs.region || 'us-east-1' }}
      ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
      ECR_REPOSITORY: syntharbiter-web-app
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-SynthArbiter
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build and Push Docker Image
        run: |
          docker build -t $ECR_REPOSITORY:${{ github.sha }} app/
          docker tag $ECR_REPOSITORY:${{ github.sha }} ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:${{ github.sha }}
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:${{ github.sha }}
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
      
  deploy-k8s:
    needs: build-push-ecr
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: ${{ github.event.inputs.region || 'us-east-1' }}
      ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}
      CLUSTER_NAME: syntharbiter-cluster-${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-SynthArbiter
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name $CLUSTER_NAME --region ${{ env.AWS_REGION }}
      
      - name: Create Namespace
        run: |
          kubectl apply -f k8s/namespace.yaml || true
      
      - name: Create NVIDIA NGC Credentials Secret
        run: |
          kubectl create secret generic nvidia-ngc-credentials \
            --from-literal=api-key="${{ secrets.NVIDIA_NGC_API_KEY }}" \
            -n syntharbiter || \
          kubectl create secret generic nvidia-ngc-credentials \
            --from-literal=api-key="${{ secrets.NVIDIA_NGC_API_KEY }}" \
            -n syntharbiter
      
      - name: Deploy NeMo Microservices
        run: |
          kubectl apply -f k8s/nemo/
      
      - name: Deploy Web Application
        run: |
          kubectl apply -f k8s/app/
      
      - name: Wait for Deployments
        run: |
          kubectl rollout status deployment/nemo-retriever -n syntharbiter --timeout=10m
          kubectl rollout status deployment/nemo-guardrails -n syntharbiter --timeout=10m
          kubectl rollout status deployment/nemo-evaluator -n syntharbiter --timeout=10m
          kubectl rollout status deployment/nim-reasoning -n syntharbiter --timeout=10m
          kubectl rollout status deployment/web-app -n syntharbiter --timeout=5m
      
      - name: Get Service Endpoints
        run: |
          echo "=== Pod Status ==="
          kubectl get pods -n syntharbiter
          echo ""
          echo "=== Service Endpoints ==="
          kubectl get svc -n syntharbiter
          echo ""
          echo "=== Ingress ==="
          kubectl get ingress -n syntharbiter || echo "No ingress found"

